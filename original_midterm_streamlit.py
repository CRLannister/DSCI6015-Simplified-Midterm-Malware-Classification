import boto3
import streamlit as st
import pandas as pd

def classify(payload_data):
    client = boto3.client('sagemaker-runtime', region_name='us-east-1',
                         aws_access_key_id='ASIAZI2LGPS62LGM2O6G', 
                         aws_secret_access_key='Zw6oRRGnc+cJJ52ssA8qsygyWaC5djx9EkJbUKFK',
                         aws_session_token='FwoGZXIvYXdzEKj//////////wEaDOMC3af+0lQqYCHKuiLAAQg8XEyNzH86flSXMa1GYtHT86lG9vbTwybf/yu0qahxiiBd3KoewLVhDca/78F8c2O4sVKMwIWOLH8vowVUXNaJj9quioBxl5cgapoHbv17jUok/OsdP8XY//j8IOXcc8fSCbq0ynwtFOhX3Erlbp5aaGehEU1BkoPQv1+FL6wSo47GZzVr7MYKpOk2QSS9L4qpGs4aBwvW89IVawQcwTuWNm7id0RDxo6MEGiwd4fud1CBIVFBW7DvxsM4VeUPUCiynI2wBjItrCC6/M1t1XGsATpJ16s+Qgpuw/Xarr5Hxv6J8AR6Tx+SIanB0yvvBa7AHbLz'
                         )
    endpoint_name = 'pytorch-inference-2024-03-26-22-24-04-285'
    content_type = 'application/json'  # The MIME type of the input data in the request body.
    accept = 'application/json'  # The desired MIME type of the inference in the response.
    response = client.invoke_endpoint(
        EndpointName=endpoint_name,
        ContentType=content_type,
        Accept=accept,
        Body=payload_data
    )

    response_body = response['Body'].read().decode('utf-8')
    response_data = json.loads(response_body)

    return response_data

# Set the page configuration for better resolution
st.set_page_config(page_title="Classification Results", layout="wide")

# Create Streamlit app
st.title('Sagemaker Endpoint Classifier')

# File uploader for uploading files
uploaded_files = st.file_uploader("Upload JSON Files", type=["json"], accept_multiple_files=True)

if uploaded_files:
    # Display uploaded file names
    st.text("Uploaded files:")
    file_names = [file.name for file in uploaded_files]
    st.text(', '.join(file_names))

    # Button to classify
    if st.button("Classify"):
        results = []
        for uploaded_file in uploaded_files:
            uploaded_file.seek(0)  # Reset file pointer to beginning
            result = classify(uploaded_file.read())
            results.append(result)

        # Display classification results
        #st.title("Classification Results")
        #df = pd.DataFrame(zip(file_names, results), columns=["Filename", "Result"])
        #st.dataframe(df.style.set_properties(**{'text-align': 'left'}), height=500)


        # Add a custom CSS file for styling
        with open("style.css") as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

        # Display classification results
        st.title("Classification Results")

        df = pd.DataFrame(zip(file_names, results), columns=["Filename", "Result"])

        # Apply custom styles
        styled_df = df.style.set_properties(**{'text-align': 'left'})
        styled_df = styled_df.set_table_styles([
            {'selector': 'th', 'props': 'background-color: #000; color: #fff;'},
            {'selector': 'tr:hover', 'props': 'background-color: #f5f5f5;'},
            {'selector': 'td', 'props': 'padding: 10px; border: 1px solid #ddd;'}
        ])

        # Display the styled DataFrame
        st.dataframe(styled_df, height=500)
